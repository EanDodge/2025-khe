import React, { useRef, useState, useEffect } from 'react';
import Sketch from 'react-p5';
import p5Types from 'p5';
import 'p5/lib/addons/p5.sound';
import './Tutorial.css';
import NavBar from './NavBar';

type KeyBindings = Record<string, string>;

interface TutorialProps {
  keyBindings: KeyBindings;
}

type NoteKeys = 'B' | 'Bb' | 'A' | 'Ab' | 'G' | 'Gb' | 'F' | 'E' | 'Eb' | 'D' | 'Db' | 'C';
type Notes = { [K in NoteKeys]: p5Types.SoundFile | null };
type KeyPositions = { [key: string]: { x: number, y: number } };

const Tutorial: React.FC<TutorialProps> = ({ keyBindings }) => {
  const notes = useRef<Notes>({
    B: null, Bb: null, A: null, Ab: null, G: null, Gb: null,
    F: null, E: null, Eb: null, D: null, Db: null, C: null
  });

  const [currentNote, setCurrentNote] = useState<NoteKeys | null>(null);
  const pressedKeys = useRef(new Set<string>());

  const preload = (p5: p5Types) => {
    if (typeof p5.loadSound !== 'undefined') {
      (Object.keys(notes.current) as NoteKeys[]).forEach(note => {
        notes.current[note] = p5.loadSound(`Notes/${note}.m4a`);
      });
    } else {
      console.error('p5.sound is not loaded!');
    }
  };

  const setup = (p5: p5Types, canvasParentRef: Element) => {
    p5.createCanvas(600, 400).parent(canvasParentRef);
    p5.textSize(50);
    Object.values(notes.current).forEach(note => {
      if (note) note.playMode('sustain');
    });
  };

  const draw = (p5: p5Types) => {
    p5.background(220);
    p5.text(currentNote || '', 300, 200);

    const keyPositions: KeyPositions = {
      'Quote': { x: 40, y: 40 },
      'Semicolon': { x: 40, y: 82 },
      'KeyL': { x: 40, y: 122 },
      'Comma': { x: 20, y: 162 },
      'Digit8': { x: 20, y: 202 },
      'KeyU': { x: 40, y: 242 },
      'KeyY': { x: 40, y: 282 },
      'KeyT': { x: 40, y: 322 },
      'Digit4': { x: 20, y: 362 },
    };

    pressedKeys.current.forEach(key => {
      const pos = keyPositions[key];
      if (pos) {
        p5.circle(pos.x, pos.y, 40);
      }
    });
  };

  const determineNote = (p5: p5Types): NoteKeys | null => {
    const keyIsDown = (note: string) => {
      const keyCode = keyBindings[note];
      return pressedKeys.current.has(keyCode);
    };

    if (isKeyDown('B') && isKeyDown('Bb') && isKeyDown('A') && !isKeyDown('Ab') &&
        isKeyDown('F') && isKeyDown('E') && isKeyDown('Eb') && isKeyDown('C') && !isKeyDown('G')) {
      return 'Eb';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && isKeyDown('A') && !isKeyDown('Ab') &&
        isKeyDown('F') && isKeyDown('E') && isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'D';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && isKeyDown('A') && !isKeyDown('Ab') &&
        isKeyDown('F') && isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'E';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && isKeyDown('A') && !isKeyDown('Ab') &&
        isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'F';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && isKeyDown('A') && !isKeyDown('Ab') &&
        !isKeyDown('F') && isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'Gb';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && isKeyDown('A') && isKeyDown('Ab') &&
        !isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'Ab';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && isKeyDown('A') && !isKeyDown('Ab') &&
        !isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'G';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && !isKeyDown('A') && !isKeyDown('Ab') &&
        !isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && isKeyDown('G')) {
      return 'Bb';
    }
  
    if (isKeyDown('B') && isKeyDown('Bb') && !isKeyDown('A') && !isKeyDown('Ab') &&
        !isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'A';
    }
  
    if (isKeyDown('B') && !isKeyDown('Bb') && !isKeyDown('A') && !isKeyDown('Ab') &&
        !isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'B';
    }
  
    if (!isKeyDown('B') && isKeyDown('Bb') && !isKeyDown('A') && !isKeyDown('Ab') &&
        !isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'C';
    }
  
    if (!isKeyDown('B') && !isKeyDown('Bb') && isKeyDown('A') && !isKeyDown('Ab') &&
        !isKeyDown('F') && !isKeyDown('E') && !isKeyDown('Eb') && !isKeyDown('C') && !isKeyDown('G')) {
      return 'Db';
    }
  
    return null;
  };


  const playNote = (note: NoteKeys | null) => {
    Object.values(notes.current).forEach(n => {
      if (n && n.isPlaying()) n.stop();
    });
    if (note) {
      const noteToPlay = notes.current[note];
      if (noteToPlay) noteToPlay.play();
    }
  };

  const keyPressed = (p5: p5Types) => {
    const keyCode = p5.key.length === 1 ? p5.keyCode : p5.key;
    pressedKeys.current.add(keyCode);
    const newNote = determineNote(p5);
    if (newNote !== currentNote) {
      setCurrentNote(newNote);
      playNote(newNote);
    }
  };

  const keyReleased = (p5: p5Types) => {
    const keyCode = p5.key.length === 1 ? p5.keyCode : p5.key;
    pressedKeys.current.delete(keyCode);
    const newNote = determineNote(p5);
    if (newNote !== currentNote) {
      setCurrentNote(newNote);
      playNote(newNote);
    }
  };

  useEffect(() => {
    console.log('Current key bindings:', keyBindings);
  }, [keyBindings]);

  return (
    <div>
      <NavBar />
      <h1 className="tut-title">Tutorial</h1>
      <Sketch
        className="tutor"
        preload={preload}
        setup={setup}
        draw={draw}
        keyPressed={keyPressed}
        keyReleased={keyReleased}
      />
    </div>
  );
};

export default Tutorial;
